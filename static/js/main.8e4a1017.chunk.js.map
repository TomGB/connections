{"version":3,"sources":["Create.jsx","index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","FormList","FormItem","AddButton","List","name","fields","add","remove","map","field","index","key","onFinish","encoded","lzEncode","JSON","stringify","console","log","window","location","origin","Create","style","maxWidth","initialValues","clues","Array","fill","Item","label","placeholder","fieldKey","marginBottom","suffix","DeleteOutlined","color","onClick","type","block","icon","PlusOutlined","htmlType","Footer","Layout","Content","Clue","text","show","setShow","isFlipped","textAlign","fontSize","height","bodyStyle","padding","background","display","flexDirection","justifyContent","mode","max","Clues","setActiveQuestionIndex","activeQuestionIndex","useState","from","length","shownClues","setShownClues","setupShow","shown","cluesWithIndex","clue","rows","splitArray","nextQuestion","a","Promise","resolve","setTimeout","message","success","width","columns","rI","gutter","size","wrap","DefaultQuestions","questions","arrayShuffle","pop","UrlQuestions","question","encodedQuestion","useParams","parse","lzDecode","error","status","title","subTitle","extra","to","shuffledClues","App","minHeight","theme","EditOutlined","PlayCircleOutlined","margin","marginTop","exact","path","target","href","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e4a1017.chunk.js","sourcesContent":["import React from \"react\"\nimport { Form, Input, Button } from \"antd\"\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport { compressToEncodedURIComponent as lzEncode } from 'lz-string'\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n}\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n}\n\nconst FormList = ({ FormItem, AddButton }) => (\n    <Form.List name=\"clues\">\n        {(fields, { add, remove }) => (\n            <>\n                {fields.map((field, index) => (\n                    <div key={field.key}>\n                        {FormItem({ field, index, remove })}\n                    </div>\n                ))}\n                <AddButton add={add} />\n            </>\n        )}\n    </Form.List>\n)\n\nconst onFinish = (fields) => {\n    const encoded = lzEncode(JSON.stringify(fields))\n    console.log(window.location.origin + process.env.PUBLIC_URL + '/#/play/' + encoded)\n}\nconst Create = () => (\n    <div style={{ maxWidth: '500px' }}>\n        <Form {...layout}\n            initialValues={{ clues: Array(12).fill(\"\") }}\n            onFinish={onFinish}\n        >\n            <Form.Item label=\"Answer\" name='answer'>\n                <Input placeholder=\"The connection\" />\n            </Form.Item>\n            <FormList\n                FormItem={({ field, index, remove }) => (\n                    <Form.Item\n                        {...field}\n                        name={field.name}\n                        fieldKey={field.fieldKey}\n                        label={index + 1}\n                        style={{ marginBottom: '8px' }}\n                    >\n                        <Input placeholder=\"Clue\" suffix={\n                            <DeleteOutlined style={{ color: '#F66' }} onClick={() => remove(field.name)} />\n                        } />\n                    </Form.Item>\n                )}\n                AddButton={({ add }) => (\n                    <Form.Item {...tailLayout}>\n                        <Button\n                            type=\"dashed\"\n                            onClick={() => add()}\n                            block icon={<PlusOutlined />}\n                        >\n                            Add Clue\n                        </Button>\n                    </Form.Item>\n                )}\n            />\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">Start</Button>\n            </Form.Item>\n        </Form>\n    </div>\n)\n\nexport default Create\n","import React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Button, Card, Col, Layout, Menu, message, Result, Row, Space } from 'antd';\nimport { Route, Switch, HashRouter as Router, Link as NavLink } from 'react-router-dom'\nimport { PlayCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport { Textfit } from 'react-textfit';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport arrayShuffle from 'array-shuffle'\nimport ReactCardFlip from 'react-card-flip';\nimport splitArray from 'split-array'\nimport { useParams } from 'react-router-dom'\nimport { decompressFromEncodedURIComponent as lzDecode } from 'lz-string'\n\nimport questions from './questions.json'\nimport Create from './Create';\n\nconst { Footer, Content } = Layout;\n\nconst Clue = ({ text, index, show, setShow }) => {\n  return <ReactCardFlip isFlipped={show}>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px', height: '100px' }}\n      bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n      onClick={() => setShow(true)}\n    >{index + 1}</Card>\n    <Card\n      style={{ textAlign: 'center', height: '100px' }}\n      bodyStyle={{ padding: '5px', height: '100px', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\n      onClick={() => setShow(false)}\n    ><Textfit mode=\"single\" max={30}>{text}</Textfit></Card>\n  </ReactCardFlip >\n}\n\nconst Clues = ({ clues, setActiveQuestionIndex = null, activeQuestionIndex = null }) => {\n  const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n  const setupShow = (index) => (shown) => {\n    shownClues[index] = shown\n    setShownClues([...shownClues])\n  }\n\n  const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n  const rows = splitArray(cluesWithIndex, 4)\n\n  const nextQuestion = async () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n    await new Promise(resolve => setTimeout(resolve, 600))\n    if (activeQuestionIndex !== 0 && setActiveQuestionIndex) {\n      setActiveQuestionIndex(activeQuestionIndex - 1)\n    } else {\n      message.success('That\\'s all folks');\n    }\n  }\n\n  const hideAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n  }\n\n  const showAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => true))\n  }\n\n  return <>\n    <div style={{ maxWidth: '800px', width: '100%' }}>\n      {rows.map((columns, rI) => <Row key={rI} gutter={[16, 16]}>{\n        columns.map(({ clue, index }) => <Col key={index} span={6}>\n          <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n        </Col>)\n      }</Row>)}\n      <Space size={[8, 8]} wrap>\n        <Button onClick={showAll}>Reveal All</Button>\n        <Button onClick={hideAll}>Hide All</Button>\n        <Button onClick={nextQuestion}>Next Question</Button>\n      </Space>\n    </div>\n  </>\n}\n\nconst DefaultQuestions = () => {\n  const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n  console.log(activeQuestionIndex)\n\n  const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n  while (clues.length > 12) {\n    clues.pop()\n  }\n\n  return <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n}\n\nconst UrlQuestions = () => {\n  const { encodedQuestion } = useParams()\n\n  let question\n\n  try {\n    question = JSON.parse(lzDecode(encodedQuestion))\n  } catch (error) {\n    console.log(error)\n    return <Result\n      status=\"error\"\n      title=\"Sorry, the URL is invalid\"\n      subTitle=\"Please check the URL has been copied correctly.\"\n      extra={<>\n        <NavLink to='/create' type=\"primary\">\n          <Button type='primary'>Create a new question</Button>\n        </NavLink>\n        <NavLink to='/'><Button>Play sample questions</Button></NavLink>\n      </>}\n    />\n  }\n\n  const shuffledClues = arrayShuffle(question.clues)\n\n  return <Clues clues={shuffledClues} />\n}\n\nconst App = () => {\n\n  return <Layout style={{ minHeight: \"100vh\" }}>\n    <Router>\n      <Menu theme=\"dark\" mode=\"horizontal\">\n        <Menu.Item icon={<EditOutlined />}><NavLink to='/create'>Create your own questions</NavLink></Menu.Item>\n        <Menu.Item icon={<PlayCircleOutlined />}><NavLink to='/'>Play example questions</NavLink></Menu.Item>\n      </Menu>\n      <Content style={{ maxWidth: '800px', width: '100%', margin: 'auto', marginTop: '100px' }}>\n        <Switch>\n          <Route exact path='/'>\n            <DefaultQuestions />\n          </Route>\n          <Route exact path='/create'><Create /></Route>\n          <Route path='/play/:encodedQuestion'>\n            <UrlQuestions />\n          </Route>\n        </Switch>\n      </Content>\n    </Router>\n    <Footer style={{ textAlign: 'center' }}>Connections ©2021 Created by <a target=\"_blank\" href=\"https://github.com/tomgb/\">Tom Banister</a></Footer>\n  </Layout >\n};\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}