{"version":3,"sources":["Create.jsx","index.js"],"names":["FormList","FormItem","AddButton","List","name","fields","add","remove","map","field","index","key","onFinish","encoded","lzEncode","JSON","stringify","console","log","gameUrl","window","location","origin","Modal","confirm","title","content","target","href","icon","CheckCircleOutlined","style","color","maskClosable","okText","cancelText","onOk","open","onCancel","LabelAndInput","label","children","marginLeft","marginRight","span","textAlign","paddingRight","lineHeight","Create","maxWidth","layout","initialValues","clues","Array","fill","Item","placeholder","fieldKey","marginBottom","suffix","DeleteOutlined","onClick","type","block","PlusOutlined","htmlType","Footer","Layout","Content","Clue","text","show","setShow","isFlipped","fontSize","height","bodyStyle","padding","background","display","flexDirection","justifyContent","mode","max","Clues","setActiveQuestionIndex","activeQuestionIndex","useState","from","length","shownClues","setShownClues","setupShow","shown","cluesWithIndex","clue","rows","splitArray","nextQuestion","a","Promise","resolve","setTimeout","message","success","width","columns","rI","gutter","size","wrap","DefaultQuestions","questions","arrayShuffle","pop","UrlQuestions","question","encodedQuestion","useParams","parse","lzDecode","error","status","subTitle","extra","to","shuffledClues","App","minHeight","theme","EditOutlined","PlayCircleOutlined","margin","marginTop","exact","path","render","document","getElementById"],"mappings":"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","file":"static/js/main.50ec4419.chunk.js","sourcesContent":["import React from \"react\"\nimport { Form, Input, Button, Col, Row, Modal } from \"antd\"\nimport { DeleteOutlined, PlusOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport { compressToEncodedURIComponent as lzEncode } from 'lz-string'\n\nconst FormList = ({ FormItem, AddButton }) => (\n    <Form.List name=\"clues\">\n        {(fields, { add, remove }) => (\n            <>\n                {fields.map((field, index) => (\n                    <div key={field.key}>\n                        {FormItem({ field, index, remove })}\n                    </div>\n                ))}\n                <AddButton add={add} />\n            </>\n        )}\n    </Form.List>\n)\n\nconst onFinish = (fields) => {\n    const encoded = lzEncode(JSON.stringify(fields))\n\n    console.log(fields)\n    const gameUrl = window.location.origin + process.env.PUBLIC_URL + '/#/play/' + encoded\n\n    Modal.confirm({\n        title: 'Game successfully created',\n        content: (\n            <div>\n                <p>Open this link to play the game</p>\n                <a target='_blank' href={gameUrl}>{gameUrl}</a>\n            </div>\n        ),\n        icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\n        maskClosable: true,\n        okText: 'Play Game',\n        cancelText: 'Close',\n        onOk() {\n            window.open(gameUrl, \"_blank\")\n        },\n        onCancel() { }\n    });\n}\n\nconst LabelAndInput = ({ label = null, children }) => (\n    <Row style={{ marginLeft: '10px', marginRight: '20px' }}>\n        <Col span={8} style={{ textAlign: 'right', paddingRight: '10px', lineHeight: '32px' }}>{label}</Col>\n        <Col span={24 - 8}>{children}</Col>\n    </Row>\n)\n\nconst Create = () => (\n    <div style={{ maxWidth: '500px' }}>\n        <Form\n            layout='horizontal'\n            initialValues={{ clues: Array(12).fill(\"\") }}\n            onFinish={onFinish}\n        >\n            <LabelAndInput label=\"Answer:\">\n                <Form.Item name='answer'>\n                    <Input placeholder=\"The connection\" />\n                </Form.Item>\n            </LabelAndInput>\n            <FormList\n                FormItem={({ field, index, remove }) => (\n                    <LabelAndInput label={index + 1 + ':'}>\n                        <Form.Item\n                            {...field}\n                            name={field.name}\n                            fieldKey={field.fieldKey}\n                            style={{ marginBottom: '8px' }}\n                        >\n                            <Input placeholder=\"Clue\" suffix={\n                                <DeleteOutlined style={{ color: '#F66' }} onClick={() => remove(field.name)} />\n                            } />\n                        </Form.Item>\n                    </LabelAndInput>\n                )}\n                AddButton={({ add }) => (\n                    <LabelAndInput>\n                        <Form.Item>\n                            <Button\n                                type=\"dashed\"\n                                onClick={() => add()}\n                                block icon={<PlusOutlined />}\n                            >\n                                Add Clue\n                            </Button>\n                        </Form.Item>\n                    </LabelAndInput>\n                )}\n            />\n            <LabelAndInput>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">Start</Button>\n                </Form.Item>\n            </LabelAndInput>\n        </Form>\n    </div>\n)\n\nexport default Create\n","import React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Button, Card, Col, Layout, Menu, message, Result, Row, Space } from 'antd';\nimport { Route, Switch, HashRouter as Router, Link as NavLink } from 'react-router-dom'\nimport { PlayCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport { Textfit } from 'react-textfit';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport arrayShuffle from 'array-shuffle'\nimport ReactCardFlip from 'react-card-flip';\nimport splitArray from 'split-array'\nimport { useParams } from 'react-router-dom'\nimport { decompressFromEncodedURIComponent as lzDecode } from 'lz-string'\n\nimport questions from './questions.json'\nimport Create from './Create';\n\nconst { Footer, Content } = Layout;\n\nconst Clue = ({ text, index, show, setShow }) => {\n  return <ReactCardFlip isFlipped={show}>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px', height: '100px' }}\n      bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n      onClick={() => setShow(true)}\n    >{index + 1}</Card>\n    <Card\n      style={{ textAlign: 'center', height: '100px' }}\n      bodyStyle={{ padding: '5px', height: '100px', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\n      onClick={() => setShow(false)}\n    ><Textfit mode=\"single\" max={30}>{text}</Textfit></Card>\n  </ReactCardFlip >\n}\n\nconst Clues = ({ clues, setActiveQuestionIndex = null, activeQuestionIndex = null }) => {\n  const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n  const setupShow = (index) => (shown) => {\n    shownClues[index] = shown\n    setShownClues([...shownClues])\n  }\n\n  const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n  const rows = splitArray(cluesWithIndex, 4)\n\n  const nextQuestion = async () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n    await new Promise(resolve => setTimeout(resolve, 600))\n    if (activeQuestionIndex !== 0 && setActiveQuestionIndex) {\n      setActiveQuestionIndex(activeQuestionIndex - 1)\n    } else {\n      message.success('That\\'s all folks');\n    }\n  }\n\n  const hideAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n  }\n\n  const showAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => true))\n  }\n\n  return <>\n    <div style={{ maxWidth: '800px', width: '100%' }}>\n      {rows.map((columns, rI) => <Row key={rI} gutter={[16, 16]}>{\n        columns.map(({ clue, index }) => <Col key={index} span={6}>\n          <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n        </Col>)\n      }</Row>)}\n      <Space size={[8, 8]} wrap>\n        <Button onClick={showAll}>Reveal All</Button>\n        <Button onClick={hideAll}>Hide All</Button>\n        <Button onClick={nextQuestion}>Next Question</Button>\n      </Space>\n    </div>\n  </>\n}\n\nconst DefaultQuestions = () => {\n  const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n  console.log(activeQuestionIndex)\n\n  const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n  while (clues.length > 12) {\n    clues.pop()\n  }\n\n  return <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n}\n\nconst UrlQuestions = () => {\n  const { encodedQuestion } = useParams()\n\n  let question\n\n  try {\n    question = JSON.parse(lzDecode(encodedQuestion))\n  } catch (error) {\n    console.log(error)\n    return <Result\n      status=\"error\"\n      title=\"Sorry, the URL is invalid\"\n      subTitle=\"Please check the URL has been copied correctly.\"\n      extra={<>\n        <NavLink to='/create' type=\"primary\">\n          <Button type='primary'>Create a new question</Button>\n        </NavLink>\n        <NavLink to='/'><Button>Play sample questions</Button></NavLink>\n      </>}\n    />\n  }\n\n  const shuffledClues = arrayShuffle(question.clues)\n\n  return <Clues clues={shuffledClues} />\n}\n\nconst App = () => {\n\n  return <Layout style={{ minHeight: \"100vh\" }}>\n    <Router>\n      <Menu theme=\"dark\" mode=\"horizontal\">\n        <Menu.Item icon={<EditOutlined />}><NavLink to='/create'>Create your own questions</NavLink></Menu.Item>\n        <Menu.Item icon={<PlayCircleOutlined />}><NavLink to='/'>Play example questions</NavLink></Menu.Item>\n      </Menu>\n      <Content style={{ maxWidth: '800px', width: '100%', margin: 'auto', marginTop: '100px' }}>\n        <Switch>\n          <Route exact path='/'>\n            <DefaultQuestions />\n          </Route>\n          <Route exact path='/create'><Create /></Route>\n          <Route path='/play/:encodedQuestion'>\n            <UrlQuestions />\n          </Route>\n        </Switch>\n      </Content>\n    </Router>\n    <Footer style={{ textAlign: 'center' }}>Connections ©2021 Created by <a target=\"_blank\" href=\"https://github.com/tomgb/\">Tom Banister</a></Footer>\n  </Layout >\n};\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}