{"version":3,"sources":["utils/uploadToImgur.js","components/Create.jsx","components/Clue.jsx","components/Clues.jsx","components/UrlQuestions.jsx","components/DefaultQuestions.jsx","index.js"],"names":["uploadToImgur","dataUrl","a","data","split","imageBase64","Buffer","from","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","response","json","link","Error","message","error","console","log","FormList","FormItem","AddButton","List","name","fields","add","remove","map","field","index","key","onFinish","form","GoogleForm","addField","JSON","stringify","send","encoded","lzEncode","gameUrl","window","location","origin","Modal","confirm","title","content","target","rel","href","icon","CheckCircleOutlined","style","color","maskClosable","okText","cancelText","onOk","open","onCancel","LabelAndInput","label","children","marginLeft","marginRight","span","textAlign","paddingRight","lineHeight","uploadAction","setClue","file","Promise","resolve","reader","FileReader","onloadend","imageObj","Image","canvas","document","createElement","ctx","getContext","width","height","onload","drawImage","toDataURL","imageUrl","src","result","toString","readAsDataURL","ImageUpload","rotate","aspect","imageWidth","minZoom","cropperProps","restrictPosition","action","listType","showUploadList","PictureOutlined","cursor","padding","Create","useState","showWarning","setShowWarning","Form","useForm","useEffect","onbeforeunload","text","clues","getFieldValue","setFieldsValue","initialValues","Array","fill","maxWidth","when","layout","Item","placeholder","value","isImage","test","fieldKey","marginBottom","className","onChange","debounce","e","addonBefore","suffix","DeleteOutlined","onClick","paddingBottom","alt","type","block","PlusOutlined","htmlType","Clue","show","setShow","image","backgroundImage","isFlipped","fontSize","bodyStyle","background","display","flexDirection","justifyContent","max","Clues","setActiveQuestionIndex","activeQuestionIndex","length","shownClues","setShownClues","setupShow","shown","cluesWithIndex","clue","rows","splitArray","nextQuestion","setTimeout","success","showAll","gutter","columns","sm","xs","size","wrap","UrlQuestions","encodedQuestion","useParams","question","parse","lzDecode","shuffledClues","arrayShuffle","pop","status","subTitle","extra","to","DefaultQuestions","questions","Footer","Layout","Content","App","minHeight","theme","EditOutlined","PlayCircleOutlined","margin","marginTop","exact","path","render","getElementById"],"mappings":"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","file":"static/js/main.44ea6758.chunk.js","sourcesContent":["import { message } from \"antd\";\n\nconst uploadToImgur = async dataUrl => {\n    const data = dataUrl.split(',')[1]\n    const imageBase64 = Buffer.from(data, 'base64');\n\n    try {\n        const response = await fetch('https://api.imgur.com/3/image', {\n            method: 'POST',\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'text/plain;charset=UTF-8',\n                'Authorization': 'Client-ID 3efda6f1a654717',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: imageBase64 // body data type must match \"Content-Type\" header\n        });\n        const link = (await response.json()).data.link\n        if (!link) throw Error('Image error')\n\n        return link\n    } catch (error) {\n        message.error('Sorry, something went wrong uploading the image, please try again later.')\n        console.log(error)\n    }\n}\n\nexport default uploadToImgur\n","import React, { useEffect, useState } from \"react\"\nimport { Form, Input, Button, Col, Row, Modal, Upload } from \"antd\"\nimport { DeleteOutlined, PlusOutlined, CheckCircleOutlined, PictureOutlined } from '@ant-design/icons';\nimport { compressToEncodedURIComponent as lzEncode } from 'lz-string'\nimport GoogleForm from 'google-form-send'\nimport ImgCrop from 'antd-img-crop'\nimport debounce from 'lodash.debounce'\nimport { Prompt } from \"react-router-dom\";\n\nimport uploadToImgur from \"../utils/uploadToImgur\";\n\nconst isUrl = s => {\n    const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n    return regexp.test(s);\n}\n\nconst FormList = ({ FormItem, AddButton }) => (\n    <Form.List name=\"clues\">\n        {(fields, { add, remove }) => (\n            <>\n                {fields.map((field, index) => (\n                    <div key={field.key}>\n                        {FormItem({ field, index, remove })}\n                    </div>\n                ))}\n                <AddButton add={add} />\n            </>\n        )}\n    </Form.List>\n)\n\nconst onFinish = (fields) => {\n    try {\n        const form = new GoogleForm('https://docs.google.com/forms/d/e/1FAIpQLScqzG86l-Cp1LhTFcH_3qhIRMKCNeLglR1tXd6NbRH8bd55Iw')\n        form.addField('entry.1329122340', JSON.stringify(fields))\n        form.send()\n    } catch (error) {\n        // this always errors but google does save the answer\n    }\n\n    const encoded = lzEncode(JSON.stringify(fields))\n\n    console.log(fields)\n    const gameUrl = window.location.origin + process.env.PUBLIC_URL + '/#/play/' + encoded\n\n    Modal.confirm({\n        title: 'Game successfully created',\n        content: (\n            <div>\n                <p>Open this link to play the game</p>\n                <a target='_blank' rel=\"noreferrer\" href={gameUrl}>{gameUrl}</a>\n            </div>\n        ),\n        icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\n        maskClosable: true,\n        okText: 'Play Game',\n        cancelText: 'Close',\n        onOk() {\n            window.open(gameUrl, \"_blank\")\n        },\n        onCancel() { }\n    });\n}\n\nconst LabelAndInput = ({ label = null, children }) => (\n    <Row style={{ marginLeft: '10px', marginRight: '20px' }}>\n        <Col span={8} style={{ textAlign: 'right', paddingRight: '10px', lineHeight: '32px' }}>{label}</Col>\n        <Col span={24 - 8}>{children}</Col>\n    </Row>\n)\n\nconst imageWidth = 186\nconst imageHeight = 100\n\nconst uploadAction = setClue => file => {\n    return new Promise(resolve => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n            var imageObj = new Image()\n            var canvas = document.createElement('CANVAS')\n\n            var ctx = canvas.getContext('2d')\n            ctx.canvas.width = imageWidth\n            ctx.canvas.height = imageHeight\n\n            imageObj.onload = async () => {\n                ctx.drawImage(imageObj, 0, 0, imageWidth, imageHeight)\n                const dataUrl = canvas.toDataURL()\n                const imageUrl = await uploadToImgur(dataUrl)\n                setClue(imageUrl)\n                resolve()\n            }\n\n            imageObj.src = reader.result.toString()\n        }\n        reader.readAsDataURL(file)\n    })\n}\n\nconst ImageUpload = ({ setClue }) => (\n    <ImgCrop rotate aspect={imageWidth / imageHeight} minZoom={0.5} cropperProps={{ restrictPosition: false }}>\n        <Upload\n            name='file'\n            action={uploadAction(setClue)}\n            listType='picture'\n            showUploadList={false}\n        >\n            <PictureOutlined style={{ cursor: 'pointer', padding: '8px 10px' }} />\n        </Upload>\n    </ImgCrop>\n)\n\nconst Create = () => {\n    const [showWarning, setShowWarning] = useState(false)\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        window.onbeforeunload = () => 'Are you sure you want to leave, this page will be reset.'\n    }, [])\n\n    const setClue = index => text => {\n        setShowWarning(true)\n        console.log('setClue')\n        const clues = form.getFieldValue('clues')\n\n        clues[index] = text\n\n        form.setFieldsValue({\n            clues,\n        })\n    }\n\n    const initialValues = Array(12).fill(\"\")\n\n    return (\n        <div style={{ maxWidth: '500px' }}>\n            <Prompt\n                when={showWarning}\n                message={() => 'Are you sure you want to leave, this page will be reset.'}\n            />\n            <Form\n                form={form}\n                layout='horizontal'\n                initialValues={{ clues: initialValues }}\n                onFinish={onFinish}\n            >\n                <LabelAndInput label=\"Answer:\">\n                    <Form.Item name='answer'>\n                        <Input placeholder=\"The connection\" />\n                    </Form.Item>\n                </LabelAndInput>\n                <FormList\n                    FormItem={({ field, index, remove }) => {\n                        const value = form.getFieldValue('clues')[index]\n                        const isImage = isUrl(value)\n                        console.log(isImage)\n                        return (\n                            <>\n                                <LabelAndInput label={index + 1 + ':'}>\n                                    <Form.Item\n                                        {...field}\n                                        name={field.name}\n                                        fieldKey={field.fieldKey}\n                                        style={{ marginBottom: '8px' }}\n                                    >\n                                        {/* <EditOutlined /> */}\n                                        <Input\n                                            placeholder=\"Clue\"\n                                            className='clue-input'\n                                            onChange={debounce((e) => setClue(index)(e.target.value), 300)}\n                                            addonBefore={<ImageUpload setClue={setClue(index)} />}\n                                            suffix={\n                                                <DeleteOutlined style={{ color: '#F66' }} onClick={() => remove(field.name)} />\n                                            } />\n                                    </Form.Item>\n                                </LabelAndInput>\n                                {isImage && <LabelAndInput><img style={{ paddingBottom: '10px' }} src={value} alt={`clue ${index + 1}`} /></LabelAndInput>}\n                            </>\n                        )\n                    }}\n                    AddButton={({ add }) => (\n                        <LabelAndInput>\n                            <Form.Item>\n                                <Button\n                                    type=\"dashed\"\n                                    onClick={() => add()}\n                                    block icon={<PlusOutlined />}\n                                >\n                                    Add Clue\n                            </Button>\n                            </Form.Item>\n                        </LabelAndInput>\n                    )}\n                />\n                <LabelAndInput>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">Generate</Button>\n                    </Form.Item>\n                </LabelAndInput>\n            </Form>\n        </div>\n    )\n}\nexport default Create\n","import React from \"react\"\nimport { Card } from \"antd\"\nimport Textfit from 'react-textfit'\nimport ReactCardFlip from \"react-card-flip\"\n\nconst isUrl = s => {\n    const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n    return regexp.test(s);\n}\n\nconst Clue = ({ text, index, show, setShow }) => {\n    const isImage = isUrl(text)\n\n    const image = isImage ? { backgroundImage: `url(${text})` } : {}\n    return (\n        <ReactCardFlip isFlipped={show}>\n            <Card\n                style={{ textAlign: 'center', fontSize: '30px', height: '100px' }}\n                bodyStyle={{ height: '100px', padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n                onClick={() => setShow(true)}\n            >{index + 1}</Card>\n            <Card\n                style={{ textAlign: 'center', height: '100px' }}\n                bodyStyle={{ ...image, padding: '5px', height: '100px', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\n                onClick={() => setShow(false)}\n            >{!isImage && <Textfit mode=\"single\" max={30}>{text}</Textfit>}</Card>\n        </ReactCardFlip >\n    )\n}\n\nexport default Clue\n","import React, { useState } from \"react\"\nimport { Button, Col, message, Row, Space } from \"antd\"\nimport splitArray from \"split-array\"\nimport Clue from \"./Clue\"\n\nconst Clues = ({ clues, setActiveQuestionIndex = null, activeQuestionIndex = null }) => {\n    const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n    const setupShow = (index) => (shown) => {\n        shownClues[index] = shown\n        setShownClues([...shownClues])\n    }\n\n    const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n    const rows = splitArray(cluesWithIndex, 4)\n\n    const nextQuestion = async () => {\n        setShownClues(Array.from({ length: 12 }, () => false))\n        await new Promise(resolve => setTimeout(resolve, 600))\n        if (activeQuestionIndex !== 0 && setActiveQuestionIndex) {\n            setActiveQuestionIndex(activeQuestionIndex - 1)\n        } else {\n            message.success('That\\'s all folks');\n        }\n    }\n\n    const showAll = show => setShownClues(Array(12).fill(show))\n\n    return <>\n        <div style={{ maxWidth: '800px', width: '100%' }}>\n            <Row gutter={[16, 16]}>\n                {rows.map(columns => columns.map(({ clue, index }) => (\n                    <Col key={index} sm={6} xs={8}>\n                        <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n                    </Col>\n                )))}\n            </Row>\n            <Space size={[8, 8]} wrap>\n                <Button onClick={() => showAll(true)}>Reveal All</Button>\n                <Button onClick={() => showAll(false)}>Hide All</Button>\n                <Button onClick={nextQuestion}>Next Question</Button>\n            </Space>\n        </div>\n    </>\n}\n\nexport default Clues\n","import { useParams, Link } from 'react-router-dom'\nimport { decompressFromEncodedURIComponent as lzDecode } from 'lz-string'\nimport React from 'react'\nimport { Button, Result } from 'antd'\nimport arrayShuffle from 'array-shuffle'\nimport Clues from './Clues'\n\nconst UrlQuestions = () => {\n    /** @type {{encodedQuestion: string}}*/\n    const { encodedQuestion } = useParams()\n\n    let clues\n\n    try {\n        const question = JSON.parse(lzDecode(encodedQuestion))\n\n        const shuffledClues = arrayShuffle(question.clues)\n\n\n        while (shuffledClues.length > 12) {\n            shuffledClues.pop()\n        }\n\n        clues = shuffledClues\n    } catch (error) {\n        console.log(error)\n        return <Result\n            status=\"error\"\n            title=\"Sorry, the URL is invalid\"\n            subTitle=\"Please check the URL has been copied correctly.\"\n            extra={<>\n                <Link to='/create' type=\"primary\">\n                    <Button type='primary'>Create a new question</Button>\n                </Link>\n                <Link to='/'><Button>Play sample questions</Button></Link>\n            </>}\n        />\n    }\n\n    return <Clues clues={clues} />\n}\n\nexport default UrlQuestions\n","import arrayShuffle from \"array-shuffle\";\nimport React, { useState } from \"react\";\n\nimport Clues from \"./Clues\";\nimport questions from '../questions.json'\n\n\nconst DefaultQuestions = () => {\n    const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n    const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n    while (clues.length > 12) {\n        clues.pop()\n    }\n\n    return <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n}\n\nexport default DefaultQuestions\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Layout, Menu } from 'antd';\nimport { Route, Switch, HashRouter as Router, Link } from 'react-router-dom'\nimport { PlayCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nimport Create from './components/Create';\nimport UrlQuestions from './components/UrlQuestions';\nimport DefaultQuestions from './components/DefaultQuestions';\n\nconst { Footer, Content } = Layout;\n\nconst App = () => (\n  <Layout style={{ minHeight: \"100vh\" }}>\n    <Router>\n      <Menu theme=\"dark\" mode=\"horizontal\">\n        <Menu.Item icon={<EditOutlined />}><Link to='/create'>Create your own questions</Link></Menu.Item>\n        <Menu.Item icon={<PlayCircleOutlined />}><Link to='/'>Play example questions</Link></Menu.Item>\n      </Menu>\n      <Content style={{ maxWidth: '800px', width: '100%', margin: 'auto', marginTop: '100px' }}>\n        <Switch>\n          <Route exact path='/'>\n            <DefaultQuestions />\n          </Route>\n          <Route exact path='/create'><Create /></Route>\n          <Route path='/play/:encodedQuestion'>\n            <UrlQuestions />\n          </Route>\n        </Switch>\n      </Content>\n    </Router>\n    <Footer style={{ textAlign: 'center' }}>Connections ©2021 Created by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/tomgb/\">Tom Banister</a></Footer>\n  </Layout >\n)\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}