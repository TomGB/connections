{"version":3,"sources":["components/Create.jsx","components/Clue.jsx","components/Clues.jsx","components/UrlQuestions.jsx","components/DefaultQuestions.jsx","index.js"],"names":["FormList","FormItem","AddButton","List","name","fields","add","remove","map","field","index","key","onFinish","form","GoogleForm","addField","JSON","stringify","send","error","encoded","lzEncode","console","log","gameUrl","window","location","origin","Modal","confirm","title","content","target","rel","href","icon","CheckCircleOutlined","style","color","maskClosable","okText","cancelText","onOk","open","onCancel","LabelAndInput","label","children","marginLeft","marginRight","span","textAlign","paddingRight","lineHeight","Create","maxWidth","layout","initialValues","clues","Array","fill","Item","placeholder","fieldKey","marginBottom","suffix","DeleteOutlined","onClick","type","block","PlusOutlined","htmlType","Clue","text","show","setShow","isFlipped","fontSize","height","bodyStyle","padding","background","display","flexDirection","justifyContent","mode","max","Clues","setActiveQuestionIndex","activeQuestionIndex","useState","from","length","shownClues","setShownClues","setupShow","shown","cluesWithIndex","clue","rows","splitArray","nextQuestion","a","Promise","resolve","setTimeout","message","success","showAll","width","gutter","columns","sm","xs","size","wrap","UrlQuestions","encodedQuestion","useParams","question","parse","lzDecode","shuffledClues","arrayShuffle","pop","status","subTitle","extra","to","DefaultQuestions","questions","Footer","Layout","Content","App","minHeight","theme","EditOutlined","PlayCircleOutlined","margin","marginTop","exact","path","render","document","getElementById"],"mappings":"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","file":"static/js/main.274e8521.chunk.js","sourcesContent":["import React from \"react\"\nimport { Form, Input, Button, Col, Row, Modal } from \"antd\"\nimport { DeleteOutlined, PlusOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport { compressToEncodedURIComponent as lzEncode } from 'lz-string'\nimport GoogleForm from 'google-form-send'\n\nconst FormList = ({ FormItem, AddButton }) => (\n    <Form.List name=\"clues\">\n        {(fields, { add, remove }) => (\n            <>\n                {fields.map((field, index) => (\n                    <div key={field.key}>\n                        {FormItem({ field, index, remove })}\n                    </div>\n                ))}\n                <AddButton add={add} />\n            </>\n        )}\n    </Form.List>\n)\n\nconst onFinish = (fields) => {\n\n    try {\n        const form = new GoogleForm('https://docs.google.com/forms/d/e/1FAIpQLScqzG86l-Cp1LhTFcH_3qhIRMKCNeLglR1tXd6NbRH8bd55Iw')\n\n        form.addField('entry.1329122340', JSON.stringify(fields))\n\n        form.send()\n    } catch (error) {\n        // this always errors but google does save the answer\n    }\n\n    const encoded = lzEncode(JSON.stringify(fields))\n\n    console.log(fields)\n    const gameUrl = window.location.origin + process.env.PUBLIC_URL + '/#/play/' + encoded\n\n    Modal.confirm({\n        title: 'Game successfully created',\n        content: (\n            <div>\n                <p>Open this link to play the game</p>\n                <a target='_blank' rel=\"noreferrer\" href={gameUrl}>{gameUrl}</a>\n            </div>\n        ),\n        icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\n        maskClosable: true,\n        okText: 'Play Game',\n        cancelText: 'Close',\n        onOk() {\n            window.open(gameUrl, \"_blank\")\n        },\n        onCancel() { }\n    });\n}\n\nconst LabelAndInput = ({ label = null, children }) => (\n    <Row style={{ marginLeft: '10px', marginRight: '20px' }}>\n        <Col span={8} style={{ textAlign: 'right', paddingRight: '10px', lineHeight: '32px' }}>{label}</Col>\n        <Col span={24 - 8}>{children}</Col>\n    </Row>\n)\n\nconst Create = () => (\n    <div style={{ maxWidth: '500px' }}>\n        <Form\n            layout='horizontal'\n            initialValues={{ clues: Array(12).fill(\"\") }}\n            onFinish={onFinish}\n        >\n            <LabelAndInput label=\"Answer:\">\n                <Form.Item name='answer'>\n                    <Input placeholder=\"The connection\" />\n                </Form.Item>\n            </LabelAndInput>\n            <FormList\n                FormItem={({ field, index, remove }) => (\n                    <LabelAndInput label={index + 1 + ':'}>\n                        <Form.Item\n                            {...field}\n                            name={field.name}\n                            fieldKey={field.fieldKey}\n                            style={{ marginBottom: '8px' }}\n                        >\n                            <Input placeholder=\"Clue\" suffix={\n                                <DeleteOutlined style={{ color: '#F66' }} onClick={() => remove(field.name)} />\n                            } />\n                        </Form.Item>\n                    </LabelAndInput>\n                )}\n                AddButton={({ add }) => (\n                    <LabelAndInput>\n                        <Form.Item>\n                            <Button\n                                type=\"dashed\"\n                                onClick={() => add()}\n                                block icon={<PlusOutlined />}\n                            >\n                                Add Clue\n                            </Button>\n                        </Form.Item>\n                    </LabelAndInput>\n                )}\n            />\n            <LabelAndInput>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">Generate</Button>\n                </Form.Item>\n            </LabelAndInput>\n        </Form>\n    </div>\n)\n\nexport default Create\n","import React from \"react\"\nimport { Card } from \"antd\"\nimport Textfit from 'react-textfit'\nimport ReactCardFlip from \"react-card-flip\"\n\nconst Clue = ({ text, index, show, setShow }) => (\n    <ReactCardFlip isFlipped={show}>\n        <Card\n            style={{ textAlign: 'center', fontSize: '30px', height: '100px' }}\n            bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n            onClick={() => setShow(true)}\n        >{index + 1}</Card>\n        <Card\n            style={{ textAlign: 'center', height: '100px' }}\n            bodyStyle={{ padding: '5px', height: '100px', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\n            onClick={() => setShow(false)}\n        ><Textfit mode=\"single\" max={30}>{text}</Textfit></Card>\n    </ReactCardFlip >\n)\n\nexport default Clue\n","import React, { useState } from \"react\"\nimport { Button, Col, message, Row, Space } from \"antd\"\nimport splitArray from \"split-array\"\nimport Clue from \"./Clue\"\n\nconst Clues = ({ clues, setActiveQuestionIndex = null, activeQuestionIndex = null }) => {\n    const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n    const setupShow = (index) => (shown) => {\n        shownClues[index] = shown\n        setShownClues([...shownClues])\n    }\n\n    const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n    const rows = splitArray(cluesWithIndex, 4)\n\n    const nextQuestion = async () => {\n        setShownClues(Array.from({ length: 12 }, () => false))\n        await new Promise(resolve => setTimeout(resolve, 600))\n        if (activeQuestionIndex !== 0 && setActiveQuestionIndex) {\n            setActiveQuestionIndex(activeQuestionIndex - 1)\n        } else {\n            message.success('That\\'s all folks');\n        }\n    }\n\n    const showAll = show => setShownClues(Array(12).fill(show))\n\n    return <>\n        <div style={{ maxWidth: '800px', width: '100%' }}>\n            <Row gutter={[16, 16]}>\n                {rows.map(columns => columns.map(({ clue, index }) => (\n                    <Col key={index} sm={6} xs={8}>\n                        <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n                    </Col>\n                )))}\n            </Row>\n            <Space size={[8, 8]} wrap>\n                <Button onClick={() => showAll(true)}>Reveal All</Button>\n                <Button onClick={() => showAll(false)}>Hide All</Button>\n                <Button onClick={nextQuestion}>Next Question</Button>\n            </Space>\n        </div>\n    </>\n}\n\nexport default Clues\n","import { useParams, Link } from 'react-router-dom'\nimport { decompressFromEncodedURIComponent as lzDecode } from 'lz-string'\nimport React from 'react'\nimport { Button, Result } from 'antd'\nimport arrayShuffle from 'array-shuffle'\nimport Clues from './Clues'\n\nconst UrlQuestions = () => {\n    /** @type {{encodedQuestion: string}}*/\n    const { encodedQuestion } = useParams()\n\n    let clues\n\n    try {\n        const question = JSON.parse(lzDecode(encodedQuestion))\n\n        const shuffledClues = arrayShuffle(question.clues)\n\n\n        while (shuffledClues.length > 12) {\n            shuffledClues.pop()\n        }\n\n        clues = shuffledClues\n    } catch (error) {\n        console.log(error)\n        return <Result\n            status=\"error\"\n            title=\"Sorry, the URL is invalid\"\n            subTitle=\"Please check the URL has been copied correctly.\"\n            extra={<>\n                <Link to='/create' type=\"primary\">\n                    <Button type='primary'>Create a new question</Button>\n                </Link>\n                <Link to='/'><Button>Play sample questions</Button></Link>\n            </>}\n        />\n    }\n\n    return <Clues clues={clues} />\n}\n\nexport default UrlQuestions\n","import arrayShuffle from \"array-shuffle\";\nimport React, { useState } from \"react\";\n\nimport Clues from \"./Clues\";\nimport questions from '../questions.json'\n\n\nconst DefaultQuestions = () => {\n    const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n    const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n    while (clues.length > 12) {\n        clues.pop()\n    }\n\n    return <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n}\n\nexport default DefaultQuestions\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Layout, Menu } from 'antd';\nimport { Route, Switch, HashRouter as Router, Link } from 'react-router-dom'\nimport { PlayCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nimport Create from './components/Create';\nimport UrlQuestions from './components/UrlQuestions';\nimport DefaultQuestions from './components/DefaultQuestions';\n\nconst { Footer, Content } = Layout;\n\nconst App = () => (\n  <Layout style={{ minHeight: \"100vh\" }}>\n    <Router>\n      <Menu theme=\"dark\" mode=\"horizontal\">\n        <Menu.Item icon={<EditOutlined />}><Link to='/create'>Create your own questions</Link></Menu.Item>\n        <Menu.Item icon={<PlayCircleOutlined />}><Link to='/'>Play example questions</Link></Menu.Item>\n      </Menu>\n      <Content style={{ maxWidth: '800px', width: '100%', margin: 'auto', marginTop: '100px' }}>\n        <Switch>\n          <Route exact path='/'>\n            <DefaultQuestions />\n          </Route>\n          <Route exact path='/create'><Create /></Route>\n          <Route path='/play/:encodedQuestion'>\n            <UrlQuestions />\n          </Route>\n        </Switch>\n      </Content>\n    </Router>\n    <Footer style={{ textAlign: 'center' }}>Connections ©2021 Created by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/tomgb/\">Tom Banister</a></Footer>\n  </Layout >\n)\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}