[{"/home/tom/projects/connections/src/index.js":"1"},{"size":2728,"mtime":1611333970263,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"rezy6w","/home/tom/projects/connections/src/index.js",["7"],"import React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Button, Card, Col, DatePicker, message, Row } from 'antd';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport arrayShuffle from 'array-shuffle'\nimport ReactCardFlip from 'react-card-flip';\n\nimport questions from './questions.json'\nimport splitArray from 'split-array'\n\nconsole.log(questions)\n\nconst Clue = ({ text, index, show, setShow }) => {\n  return <ReactCardFlip isFlipped={show}>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px' }}\n      bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n      onClick={() => setShow(true)}\n    >{index + 1}</Card>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px' }}\n      bodyStyle={{ padding: '24px 0px' }}\n      onClick={() => setShow(false)}\n    >{text}</Card>\n  </ReactCardFlip>\n}\n\nconst Clues = ({ clues, setActiveQuestionIndex, activeQuestionIndex }) => {\n  const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n  const setupShow = (index) => (shown) => {\n    shownClues[index] = shown\n    setShownClues([...shownClues])\n  }\n\n  const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n  const rows = splitArray(cluesWithIndex, 4)\n\n  const nextQuestion = async () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    if (activeQuestionIndex !== 0) {\n      setActiveQuestionIndex(activeQuestionIndex - 1)\n    } else {\n      message.success('That\\'s all folks');\n    }\n  }\n\n  const hideAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n  }\n\n  const showAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => true))\n  }\n\n  return <div style={{ width: '800px', margin: 'auto' }}>\n    <div style={{ width: '800px' }}>{\n      rows.map(columns => <Row gutter={[16, 16]}>{\n        columns.map(({ clue, index }) => <Col span={6}>\n          <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n        </Col>)\n      }</Row>)\n    }</div>\n    <Button onClick={showAll}>Reveal All</Button>\n    <Button onClick={hideAll}>Hide All</Button>\n    <Button onClick={nextQuestion}>Next Question</Button>\n  </div>\n}\n\nconst App = () => {\n  const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n  console.log(activeQuestionIndex)\n\n  const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n  while (clues.length > 12) {\n    clues.pop()\n  }\n\n  return <>\n    <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n  </>\n};\n\nrender(<App />, document.getElementById('root'));\n",{"ruleId":"8","severity":1,"message":"9","line":3,"column":29,"nodeType":"10","messageId":"11","endLine":3,"endColumn":39},"no-unused-vars","'DatePicker' is defined but never used.","Identifier","unusedVar"]