[{"/home/tom/projects/connections/src/index.js":"1","/home/tom/projects/connections/src/Create.jsx":"2"},{"size":4950,"mtime":1611433894252,"results":"3","hashOfConfig":"4"},{"size":2492,"mtime":1611433943873,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"rezy6w",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tom/projects/connections/src/index.js",["11"],"import React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Button, Card, Col, Layout, Menu, message, Result, Row, Space } from 'antd';\nimport { Route, Switch, HashRouter as Router, Link as NavLink } from 'react-router-dom'\nimport { PlayCircleOutlined, EditOutlined } from '@ant-design/icons';\nimport { Textfit } from 'react-textfit';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport arrayShuffle from 'array-shuffle'\nimport ReactCardFlip from 'react-card-flip';\nimport splitArray from 'split-array'\nimport { useParams } from 'react-router-dom'\nimport { decompressFromEncodedURIComponent as lzDecode } from 'lz-string'\n\nimport questions from './questions.json'\nimport Create from './Create';\n\nconst { Footer, Content } = Layout;\n\nconst Clue = ({ text, index, show, setShow }) => {\n  return <ReactCardFlip isFlipped={show}>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px', height: '100px' }}\n      bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n      onClick={() => setShow(true)}\n    >{index + 1}</Card>\n    <Card\n      style={{ textAlign: 'center', height: '100px' }}\n      bodyStyle={{ padding: '5px', height: '100px', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}\n      onClick={() => setShow(false)}\n    ><Textfit mode=\"single\" max={30}>{text}</Textfit></Card>\n  </ReactCardFlip >\n}\n\nconst Clues = ({ clues, setActiveQuestionIndex = null, activeQuestionIndex = null }) => {\n  const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n  const setupShow = (index) => (shown) => {\n    shownClues[index] = shown\n    setShownClues([...shownClues])\n  }\n\n  const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n  const rows = splitArray(cluesWithIndex, 4)\n\n  const nextQuestion = async () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n    await new Promise(resolve => setTimeout(resolve, 600))\n    if (activeQuestionIndex !== 0 && setActiveQuestionIndex) {\n      setActiveQuestionIndex(activeQuestionIndex - 1)\n    } else {\n      message.success('That\\'s all folks');\n    }\n  }\n\n  const hideAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n  }\n\n  const showAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => true))\n  }\n\n  return <>\n    <div style={{ maxWidth: '800px', width: '100%' }}>\n      {rows.map((columns, rI) => <Row key={rI} gutter={[16, 16]}>{\n        columns.map(({ clue, index }) => <Col key={index} span={6}>\n          <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n        </Col>)\n      }</Row>)}\n      <Space size={[8, 8]} wrap>\n        <Button onClick={showAll}>Reveal All</Button>\n        <Button onClick={hideAll}>Hide All</Button>\n        <Button onClick={nextQuestion}>Next Question</Button>\n      </Space>\n    </div>\n  </>\n}\n\nconst DefaultQuestions = () => {\n  const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n  console.log(activeQuestionIndex)\n\n  const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n  while (clues.length > 12) {\n    clues.pop()\n  }\n\n  return <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n}\n\nconst UrlQuestions = () => {\n  const { encodedQuestion } = useParams()\n\n  let question\n\n  try {\n    question = JSON.parse(lzDecode(encodedQuestion))\n  } catch (error) {\n    console.log(error)\n    return <Result\n      status=\"error\"\n      title=\"Sorry, the URL is invalid\"\n      subTitle=\"Please check the URL has been copied correctly.\"\n      extra={<>\n        <NavLink to='/create' type=\"primary\">\n          <Button type='primary'>Create a new question</Button>\n        </NavLink>\n        <NavLink to='/'><Button>Play sample questions</Button></NavLink>\n      </>}\n    />\n  }\n\n  const shuffledClues = arrayShuffle(question.clues)\n\n  return <Clues clues={shuffledClues} />\n}\n\nconst App = () => {\n\n  return <Layout style={{ minHeight: \"100vh\" }}>\n    <Router>\n      <Menu theme=\"dark\" mode=\"horizontal\">\n        <Menu.Item icon={<EditOutlined />}><NavLink to='/create'>Create your own questions</NavLink></Menu.Item>\n        <Menu.Item icon={<PlayCircleOutlined />}><NavLink to='/'>Play example questions</NavLink></Menu.Item>\n      </Menu>\n      <Content style={{ maxWidth: '800px', width: '100%', margin: 'auto', marginTop: '100px' }}>\n        <Switch>\n          <Route exact path='/'>\n            <DefaultQuestions />\n          </Route>\n          <Route exact path='/create'><Create /></Route>\n          <Route path='/play/:encodedQuestion'>\n            <UrlQuestions />\n          </Route>\n        </Switch>\n      </Content>\n    </Router>\n    <Footer style={{ textAlign: 'center' }}>Connections Â©2021 Created by <a target=\"_blank\" href=\"https://github.com/tomgb/\">Tom Banister</a></Footer>\n  </Layout >\n};\n\nrender(<App />, document.getElementById('root'));\n","/home/tom/projects/connections/src/Create.jsx",[],{"ruleId":"12","severity":1,"message":"13","line":143,"column":77,"nodeType":"14","endLine":143,"endColumn":92},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]