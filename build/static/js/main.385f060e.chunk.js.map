{"version":3,"sources":["index.js"],"names":["console","log","questions","Clue","text","index","show","setShow","isFlipped","style","textAlign","fontSize","bodyStyle","padding","color","background","onClick","Clues","clues","setActiveQuestionIndex","activeQuestionIndex","useState","Array","from","length","shownClues","setShownClues","setupShow","shown","cluesWithIndex","map","clue","rows","splitArray","nextQuestion","a","Promise","resolve","setTimeout","message","success","width","margin","columns","gutter","span","App","arrayShuffle","pop","render","document","getElementById"],"mappings":"qiDAWAA,QAAQC,IAAIC,GAEZ,IAAMC,EAAO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACjC,OAAO,eAAC,IAAD,CAAeC,UAAWF,EAA1B,UACL,cAAC,IAAD,CACEG,MAAO,CAAEC,UAAW,SAAUC,SAAU,QACxCC,UAAW,CAAEC,QAAS,WAAYC,MAAO,QAASC,WAAY,WAC9DC,QAAS,kBAAMT,GAAQ,IAHzB,SAIEF,EAAQ,IACV,cAAC,IAAD,CACEI,MAAO,CAAEC,UAAW,SAAUC,SAAU,QACxCC,UAAW,CAAEC,QAAS,YACtBG,QAAS,kBAAMT,GAAQ,IAHzB,SAIEH,QAIAa,EAAQ,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,uBAAwBC,EAA0B,EAA1BA,oBAA0B,EACpCC,mBAASC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAM,MADN,mBACjEC,EADiE,KACrDC,EADqD,KAGlEC,EAAY,SAACtB,GAAD,OAAW,SAACuB,GAC5BH,EAAWpB,GAASuB,EACpBF,EAAc,YAAID,MAGdI,EAAiBX,EAAMY,KAAI,SAACC,EAAM1B,GAAP,MAAkB,CAAE0B,OAAM1B,YAErD2B,EAAOC,IAAWJ,EAAgB,GAElCK,EAAY,uCAAG,sBAAAC,EAAA,6DACnBT,EAAcJ,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAM,MAD5B,SAEb,IAAIY,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAF9B,OAGS,IAAxBjB,EACFD,EAAuBC,EAAsB,GAE7CmB,IAAQC,QAAQ,oBANC,2CAAH,qDAkBlB,OAAO,sBAAK/B,MAAO,CAAEgC,MAAO,QAASC,OAAQ,QAAtC,UACL,qBAAKjC,MAAO,CAAEgC,MAAO,SAArB,SACET,EAAKF,KAAI,SAAAa,GAAO,OAAI,cAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,SAClBD,EAAQb,KAAI,gBAAGC,EAAH,EAAGA,KAAM1B,EAAT,EAASA,MAAT,OAAqB,cAAC,IAAD,CAAKwC,KAAM,EAAX,SAC/B,cAAC1C,EAAD,CAAMC,KAAM2B,EAAM1B,MAAOA,EAAOC,KAAMmB,EAAWpB,GAAQE,QAASoB,EAAUtB,iBAIlF,cAAC,IAAD,CAAQW,QAZM,WACdU,EAAcJ,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAM,OAW/C,wBACA,cAAC,IAAD,CAAQR,QAjBM,WACdU,EAAcJ,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAM,OAgB/C,sBACA,cAAC,IAAD,CAAQR,QAASkB,EAAjB,+BAIEY,EAAM,WAAO,IAAD,EACsCzB,mBAASnB,EAAUsB,OAAS,GADlE,mBACTJ,EADS,KACYD,EADZ,KAGhBnB,QAAQC,IAAImB,GAIZ,IAFA,IAAMF,EAAQ6B,IAAa7C,EAAUkB,GAAqBH,OAEnDC,EAAMM,OAAS,IACpBN,EAAM8B,MAGR,OAAO,mCACL,cAAC/B,EAAD,CAAOC,MAAOA,EAAOE,oBAAqBA,EAAqBD,uBAAwBA,OAI3F8B,iBAAO,cAACH,EAAD,IAASI,SAASC,eAAe,U","file":"static/js/main.385f060e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Button, Card, Col, DatePicker, message, Row } from 'antd';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport arrayShuffle from 'array-shuffle'\nimport ReactCardFlip from 'react-card-flip';\n\nimport questions from './questions.json'\nimport splitArray from 'split-array'\n\nconsole.log(questions)\n\nconst Clue = ({ text, index, show, setShow }) => {\n  return <ReactCardFlip isFlipped={show}>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px' }}\n      bodyStyle={{ padding: '24px 0px', color: 'white', background: '#3a3d3e' }}\n      onClick={() => setShow(true)}\n    >{index + 1}</Card>\n    <Card\n      style={{ textAlign: 'center', fontSize: '30px' }}\n      bodyStyle={{ padding: '24px 0px' }}\n      onClick={() => setShow(false)}\n    >{text}</Card>\n  </ReactCardFlip>\n}\n\nconst Clues = ({ clues, setActiveQuestionIndex, activeQuestionIndex }) => {\n  const [shownClues, setShownClues] = useState(Array.from({ length: 12 }, () => false))\n\n  const setupShow = (index) => (shown) => {\n    shownClues[index] = shown\n    setShownClues([...shownClues])\n  }\n\n  const cluesWithIndex = clues.map((clue, index) => ({ clue, index }))\n\n  const rows = splitArray(cluesWithIndex, 4)\n\n  const nextQuestion = async () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    if (activeQuestionIndex !== 0) {\n      setActiveQuestionIndex(activeQuestionIndex - 1)\n    } else {\n      message.success('That\\'s all folks');\n    }\n  }\n\n  const hideAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => false))\n  }\n\n  const showAll = () => {\n    setShownClues(Array.from({ length: 12 }, () => true))\n  }\n\n  return <div style={{ width: '800px', margin: 'auto' }}>\n    <div style={{ width: '800px' }}>{\n      rows.map(columns => <Row gutter={[16, 16]}>{\n        columns.map(({ clue, index }) => <Col span={6}>\n          <Clue text={clue} index={index} show={shownClues[index]} setShow={setupShow(index)} />\n        </Col>)\n      }</Row>)\n    }</div>\n    <Button onClick={showAll}>Reveal All</Button>\n    <Button onClick={hideAll}>Hide All</Button>\n    <Button onClick={nextQuestion}>Next Question</Button>\n  </div>\n}\n\nconst App = () => {\n  const [activeQuestionIndex, setActiveQuestionIndex] = useState(questions.length - 1);\n\n  console.log(activeQuestionIndex)\n\n  const clues = arrayShuffle(questions[activeQuestionIndex].Clues)\n\n  while (clues.length > 12) {\n    clues.pop()\n  }\n\n  return <>\n    <Clues clues={clues} activeQuestionIndex={activeQuestionIndex} setActiveQuestionIndex={setActiveQuestionIndex} />\n  </>\n};\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}